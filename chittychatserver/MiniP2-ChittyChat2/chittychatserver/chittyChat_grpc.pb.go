// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chittychatserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServicesClient is the client API for Services service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesClient interface {
	JoinServer(ctx context.Context, in *FromClient, opts ...grpc.CallOption) (*FromServer, error)
	ChatService(ctx context.Context, opts ...grpc.CallOption) (Services_ChatServiceClient, error)
	LeaveServer(ctx context.Context, in *FromClient, opts ...grpc.CallOption) (*FromServer, error)
}

type servicesClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesClient(cc grpc.ClientConnInterface) ServicesClient {
	return &servicesClient{cc}
}

func (c *servicesClient) JoinServer(ctx context.Context, in *FromClient, opts ...grpc.CallOption) (*FromServer, error) {
	out := new(FromServer)
	err := c.cc.Invoke(ctx, "/chittychatserver.Services/JoinServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) ChatService(ctx context.Context, opts ...grpc.CallOption) (Services_ChatServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &Services_ServiceDesc.Streams[0], "/chittychatserver.Services/ChatService", opts...)
	if err != nil {
		return nil, err
	}
	x := &servicesChatServiceClient{stream}
	return x, nil
}

type Services_ChatServiceClient interface {
	Send(*FromClient) error
	Recv() (*FromServer, error)
	grpc.ClientStream
}

type servicesChatServiceClient struct {
	grpc.ClientStream
}

func (x *servicesChatServiceClient) Send(m *FromClient) error {
	return x.ClientStream.SendMsg(m)
}

func (x *servicesChatServiceClient) Recv() (*FromServer, error) {
	m := new(FromServer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *servicesClient) LeaveServer(ctx context.Context, in *FromClient, opts ...grpc.CallOption) (*FromServer, error) {
	out := new(FromServer)
	err := c.cc.Invoke(ctx, "/chittychatserver.Services/LeaveServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesServer is the server API for Services service.
// All implementations should embed UnimplementedServicesServer
// for forward compatibility
type ServicesServer interface {
	JoinServer(context.Context, *FromClient) (*FromServer, error)
	ChatService(Services_ChatServiceServer) error
	LeaveServer(context.Context, *FromClient) (*FromServer, error)
}

// UnimplementedServicesServer should be embedded to have forward compatible implementations.
type UnimplementedServicesServer struct {
}

func (UnimplementedServicesServer) JoinServer(context.Context, *FromClient) (*FromServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinServer not implemented")
}
func (UnimplementedServicesServer) ChatService(Services_ChatServiceServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatService not implemented")
}
func (UnimplementedServicesServer) LeaveServer(context.Context, *FromClient) (*FromServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveServer not implemented")
}

// UnsafeServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesServer will
// result in compilation errors.
type UnsafeServicesServer interface {
	mustEmbedUnimplementedServicesServer()
}

func RegisterServicesServer(s grpc.ServiceRegistrar, srv ServicesServer) {
	s.RegisterService(&Services_ServiceDesc, srv)
}

func _Services_JoinServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FromClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).JoinServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chittychatserver.Services/JoinServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).JoinServer(ctx, req.(*FromClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_ChatService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServicesServer).ChatService(&servicesChatServiceServer{stream})
}

type Services_ChatServiceServer interface {
	Send(*FromServer) error
	Recv() (*FromClient, error)
	grpc.ServerStream
}

type servicesChatServiceServer struct {
	grpc.ServerStream
}

func (x *servicesChatServiceServer) Send(m *FromServer) error {
	return x.ServerStream.SendMsg(m)
}

func (x *servicesChatServiceServer) Recv() (*FromClient, error) {
	m := new(FromClient)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Services_LeaveServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FromClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).LeaveServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chittychatserver.Services/LeaveServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).LeaveServer(ctx, req.(*FromClient))
	}
	return interceptor(ctx, in, info, handler)
}

// Services_ServiceDesc is the grpc.ServiceDesc for Services service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Services_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chittychatserver.Services",
	HandlerType: (*ServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinServer",
			Handler:    _Services_JoinServer_Handler,
		},
		{
			MethodName: "LeaveServer",
			Handler:    _Services_LeaveServer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatService",
			Handler:       _Services_ChatService_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chittyChat.proto",
}
